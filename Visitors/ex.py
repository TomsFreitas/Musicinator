from midiutil import MIDIFile
import sys

bpm = 160
midi = MIDIFile(numTracks=25, file_format=1)
midi.addTempo(0,0,bpm)
currtrack = 0

bass = [44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44]
piano = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
violin = [41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41]
porcoespinho = [-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
drums
guitar = [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25]
cello = [43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43]

def addnotes(notes):
    time = notes[0] #When the sequence will start time wise
    temp = 1 #default instrument
    global currtrack #we want the global scope of this variable


    repeat_times = (int)(notes[len(notes)-1])

    for x in range(len(time)):
        initialTime = time[x]
        for _ in range(repeat_times):
            for i in range(0, len(notes[1])):
                try:
                    note = notes[1][i][0] #getting the note
                    duration = notes[1][i][1] #duration of the note
                    toInsert = notes[1][i][3] + initialTime
                    if note < 0:
                        continue

                except:
                    pass

                try: #trying for instrument change
                    instrument = notes[1][i][2] #checking for instrument
                    if(instrument != temp):
                        midi.addProgramChange(currtrack, 0, toInsert, instrument) #changing the current instrument
                        temp = instrument
                except:
                    instrument = temp #it keeps the old instrument
                    pass

                midi.addNote(currtrack,0,note,toInsert,duration,100)

                print("Added note {}, with instument {} with a duration of {} on time {}, on channel {}".format(note, instrument, duration, toInsert, currtrack))
        currtrack += 1

def getInt(varstr):
    while True:
        try:
            a = int(input(varstr))
        except ValueError:
            print("Please input a valid number")
            continue
        else:
            break
    return a

def duration(toCheck):
    if type(toCheck[0]) is tuple:
        size = len(toCheck)-1
        return toCheck[0][3] + toCheck[size][3] + toCheck[size][1]
    else:
        size = len(toCheck[1]) - 1
        return toCheck[1][0][3] + toCheck[1][size][3] + toCheck[1][size][1]

def modPitch(toMod, ModNumber):
    modded = []
    if type(toMod[0]) is tuple:
        for tup in toMod:
            newPitch = tup[0] + ModNumber
            try:
                if newPitch < 0:
                    raise ValueError
            except ValueError:
                print("Modulated note below 0, expect silence")
                pass
            newtup = (newPitch, tup[1],tup[2],tup[3])
            modded.append(newtup)
        return modded
    else:
        for tup in toMod[1]:
            newPitch = tup[0] + ModNumber
            try:
                if newPitch < 0:
                    raise ValueError
            except ValueError:
                print("Modulated note below 0, expect silence")
                pass
            newtup = (newPitch, tup[1],tup[2],tup[3])
            modded.append(newtup)
        toMod[1] = modded
        return toMod


def modTempo(toMod, ModNumber):
    modded = []
    if type(toMod[0]) is tuple:
        for tup in toMod:
            newTempo = tup[1] * ModNumber
            newtup = (tup[0], newTempo,tup[2],tup[3])
            modded.append(newtup)
        return modded
    else:
        for tup in toMod[1]:
            newTempo = tup[1] * ModNumber
            newtup = (tup[0], newTempo,tup[2],tup[3])
            modded.append(newtup)
        toMod[1] = modded
        return toMod

def extendseq(original, toextend):
    modded = []
    if len(original) == 0:
        for tup in toextend:
            newtup = (tup[0], tup[1], tup[2], 0)
            modded.append(newtup)
        return modded
    else:
        for tup in original:
            modded.append(tup)
        time = duration(original)
        for tup in toextend:
            newtup = (tup[0], tup[1], tup[2], time)
            modded.append(newtup)
        return modded

def createseq(seq):
    newseq = []
    for s in seq:
        newseq = extendseq(newseq, s)
    return newseq

def setinstrument(seq,nome):
    if len(seq)==0:
        return seq
    newseq = []
    for tup in seq:
        new = (tup[0],tup[1],nome[tup[0]],tup[3])
        newseq.append(new)
    return newseq


############################ LINE = 1
_4 = [(109,2.0,-1,-1)]
_5 = [(69,1.0,-1,-1)]
_6 = [(60,1.0,-1,-1)]
_7 = [(62,3.12,-1,-1)]
_8 = [(71,1.0,-1,-1)]
_9 = [(108,1.0,-1,-1)]
_10 = [(62,3.0,-1,-1)]
_11 = [(73,0.5,-1,-1)]
_12 = [(64,4.0,-1,-1)]
_13 = [(77,3.0,-1,-1)]
_14 = [(65,0.0625,-1,-1)]
_3 = createseq([_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14])
_15 = 40
_2 = modPitch(_3, _15)
_16 = 20
_1 = modPitch(_2, -1*_16)
_17 = 12
_0 = modPitch(_1, _17)
first1_sequence = _0
############################ LINE = 3
_18 = duration(first1_sequence)
t = _18
############################ LINE = 4
_19 = 20
non = _19
############################ LINE = 5
_21 = [(60,1.0,-1,-1),(64,1.0,-1,-1),(67,1.0,-1,-1)]
_20 = createseq([_21])
intro = _20
############################ LINE = 7
_23 = [(60,1.0,-1,-1)]
_22 = createseq([_23])
twinkle1 = _22
############################ LINE = 8
_25 = [(60,1.0,-1,-1)]
_26 = [(60,1.0,-1,-1)]
_27 = [(67,1.0,-1,-1)]
_28 = [(67,1.0,-1,-1)]
_29 = [(69,1.0,-1,-1)]
_30 = [(69,1.0,-1,-1)]
_31 = [(67,2.0,-1,-1)]
_32 = [(65,1.0,-1,-1)]
_33 = [(65,1.0,-1,-1)]
_34 = [(64,1.0,-1,-1)]
_35 = [(64,1.0,-1,-1)]
_36 = [(62,1.0,-1,-1)]
_37 = [(62,1.0,-1,-1)]
_38 = [(60,2.0,-1,-1)]
_24 = createseq([_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38])
twinkle = _24
############################ LINE = 9
_39 = setinstrument(twinkle, guitar)
_39 = [[-1], _39, -1]
p = _39
############################ LINE = 11
_41 = [(-49,4.0,-1,-1)]
_42 = [(60,4.0,-1,-1)]
_43 = [(67,4.0,-1,-1)]
_44 = [(72,3.5,-1,-1)]
_45 = [(64,0.5,-1,-1),(67,0.5,-1,-1),(72,0.5,-1,-1)]
_46 = [(64,8.0,-1,-1),(67,8.0,-1,-1),(72,8.0,-1,-1)]
_47 = [(60,4.0,-1,-1)]
_48 = [(67,4.0,-1,-1)]
_40 = createseq([_41,_42,_43,_44,_45,_46,_47,_48])
intro2 = _40
############################ LINE = 13
_51 = [(60,0.25,-1,-1)]
_52 = [(60,1.0,-1,-1)]
_53 = [(67,1.0,-1,-1)]
_54 = [(67,1.0,-1,-1)]
_55 = [(69,0.5,-1,-1)]
_56 = [(69,0.5,-1,-1)]
_57 = [(67,2.0,-1,-1)]
_58 = [(65,1.0,-1,-1)]
_59 = [(65,1.0,-1,-1)]
_60 = [(64,1.0,-1,-1)]
_61 = [(64,1.0,-1,-1)]
_62 = [(62,1.0,-1,-1)]
_63 = [(62,1.0,-1,-1)]
_64 = [(60,2.0,-1,-1)]
_50 = createseq([_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64])
_49 = setinstrument(_50, guitar)
_49 = [[-1], _49, -1]
pp = _49
############################ LINE = 15
_65 = [piano,guitar,bass]
band = _65
############################ LINE = 16
_68 = [bass,drums]
_67 = [guitar,_68]
_66 = [piano,_67]
band3 = _66
############################ LINE = 17
_70 = 1
_71 = 2
_69 = [_70,_71]
n = _69
############################ LINE = 18
_73 = 1
_74 = 1
_72 = range(_73, _74+1)
n2 = _72
############################ LINE = 19
_76 = [(60,1.0,-1,-1)]
_77 = [(60,1.0,-1,-1)]
_78 = [(67,1.0,-1,-1)]
_79 = [(67,1.0,-1,-1)]
_80 = [(69,1.0,-1,-1)]
_81 = [(69,1.0,-1,-1)]
_82 = [(67,2.0,-1,-1)]
_83 = [(65,1.0,-1,-1)]
_84 = [(65,1.0,-1,-1)]
_85 = [(64,1.0,-1,-1)]
_86 = [(64,1.0,-1,-1)]
_87 = [(62,1.0,-1,-1)]
_88 = [(62,1.0,-1,-1)]
_89 = [(60,2.0,-1,-1)]
_75 = createseq([_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89])
s = _75
############################ LINE = 22
p[0] = [0]
p[2] = 1
addnotes(p)
############################ LINE = 23
pp[0] = [0]
pp[2] = 1
pp[0] = [non]
addnotes(pp)
############################ LINE = 24
pp[0] = [0]
pp[2] = 1
pp[0] = n
addnotes(pp)
############################ LINE = 27
_92 = duration(p)
_93 = 10
_91 = _92==_93
_90 = _91
_96 = duration(p)
_97 = 10
_95 = _96==_97
_94 = _95
_99 = duration(s)
_100 = 10
_98 = _99>_100
if _98:
	############################ LINE = 28
	_101 = setinstrument(s, piano)
	_101 = [[-1], _101, -1]
	_101[0] = [0]
	_101[2] = 1
	addnotes(_101)
elif _90:
	############################ LINE = 34
	p[0] = [0]
	p[2] = 1
	addnotes(p)
elif _94:
	############################ LINE = 34
	p[0] = [0]
	p[2] = 1
	addnotes(p)
else:
	############################ LINE = 37
	_102 = setinstrument(s, piano)
	_102 = [[-1], _102, -1]
	_102[0] = [0]
	_102[2] = 1
	addnotes(_102)
############################ LINE = 42
_103 = setinstrument(twinkle, piano)
_103 = [[-1], _103, -1]
_103[0] = [0]
_103[2] = 1
addnotes(_103)
############################ LINE = 44
_106 = [(60,1.0,-1,-1)]
_107 = [(60,1.0,-1,-1)]
_108 = [(67,1.0,-1,-1)]
_109 = [(67,1.0,-1,-1)]
_110 = [(69,1.0,-1,-1)]
_111 = [(69,1.0,-1,-1)]
_112 = [(67,2.0,-1,-1)]
_113 = [(65,1.0,-1,-1)]
_114 = [(65,1.0,-1,-1)]
_115 = [(64,1.0,-1,-1)]
_116 = [(64,1.0,-1,-1)]
_117 = [(62,1.0,-1,-1)]
_118 = [(62,1.0,-1,-1)]
_119 = [(60,2.0,-1,-1)]
_105 = createseq([_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119])
_104 = setinstrument(_105, piano)
_104 = [[-1], _104, -1]
_104[0] = [0]
_104[2] = 1
addnotes(_104)
############################ LINE = 47
_123 = [(62,1.5,-1,-1)]
_124 = [(62,0.5,-1,-1)]
_125 = [(64,1.0,-1,-1)]
_126 = [(62,1.0,-1,-1)]
_127 = [(67,1.0,-1,-1)]
_128 = [(65,2.0,-1,-1)]
_122 = createseq([_123,_124,_125,_126,_127,_128])
_121 = setinstrument(_122, piano)
_121 = [[-1], _121, -1]
_131 = [(62,1.5,-1,-1)]
_132 = [(62,0.5,-1,-1)]
_133 = [(64,1.0,-1,-1)]
_134 = [(62,1.0,-1,-1)]
_135 = [(69,1.0,-1,-1)]
_136 = [(67,2.0,-1,-1)]
_130 = createseq([_131,_132,_133,_134,_135,_136])
_129 = setinstrument(_130, bass)
_129 = [[-1], _129, -1]
_120 = [_121,_129]
p_a = _120
############################ LINE = 52
p_a[0] = [0]
p_a[2] = 1
addnotes(p_a)
############################ LINE = 54
_137 = [band,violin]
new_band = _137
############################ LINE = 58
intro3 = p_a[0]
############################ LINE = 60
for inst in band:
	############################ LINE = 61
	_138 = setinstrument(twinkle, inst)
	_138 = [[-1], _138, -1]
	_138[0] = [0]
	_138[2] = 1
	addnotes(_138)

with open("out.mid", 'wb') as file:
    midi.writeFile(file) #Writting the file
    print("MIDI File Written")
