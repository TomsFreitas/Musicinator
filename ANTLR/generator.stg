header() ::= <<
from midiutil import MIDIFile
import sys
>>

createmidi(varbpm, vartrack) ::= <<
bpm = <varbpm>
midi = MIDIFile(numTracks=<vartrack>, file_format=1)
midi.addTempo(0,0,bpm)
currtrack = 0
>>

body() ::= <<
def addnotes(notes):
    time = notes[0] #When the sequence will start time wise
    temp = 1 #default instrument
    global currtrack #we want the global scope of this variable


    repeat_times = (int)(notes[len(notes)-1])
    
    for x in range(len(time)):
        initialTime = time[x]
        for _ in range(repeat_times):
            for i in range(1, len(notes)-1):
                try:
                    note = notes[i][0] #getting the note
                    duration = notes[i][1] #duration of the note
                    toInsert = notes[i][3] + initialTime
                    if note == -1:
                        continue

                except:
                    pass
                
                try: #trying for instrument change
                    instrument = notes[i][2] #checking for instrument
                    if(instrument != temp):
                        midi.addProgramChange(currtrack, 0, toInsert, instrument) #changing the current instrument
                        temp = instrument
                except:
                    instrument = temp #it keeps the old instrument
                    pass
                
                midi.addNote(currtrack,0,note,toInsert,duration,100)

                print("Added note {}, with instument {} with a duration of {} on time {}, on channel {}".format(note, instrument, duration, toInsert, currtrack))
        currtrack += 1
>>


createperformance(name, notes) ::= "<name> = <notes>"

addperformance(name) ::= "addnotes(<name>)"

exportfile(name) ::= <<
with open("<name>", 'wb') as file:
    midi.writeFile(file) #Writting the file
    print("MIDI File Written")
>>

getInt() ::= <<
def getInt(varstr):
    while True:
        try:
            a = int(input(varstr))
        except ValueError:
            print("Please input a valid number")
            continue
        else:
            break
    return a

>>
u_getint(str, varname) ::= <<
<varname> = getInt(<str>)
>>

vardec(name, value) ::= "<name> = <value>"

forloop(begin, end, code, indent) ::= <<
<indent>for <begin> in <end>:
    <indent><code>
>>

ifstat(codition, code, indent) ::= <<
<indent>if <condition>:
    <indent><code>
>>

elseif(condition, code,indent) ::= <<
<indent>elif <condition>:
    <indent><code>
>>

fornumbers(first, last, code, indent) ::= <<
<indent>for i in range(<first>, <last>+1):
    <indent><code>
>>


